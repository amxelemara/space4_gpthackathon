# org: ${file(./cred.yml):org_name}
# app: tldrsci

service: tldrsci-main
frameworkVersion: "3"
useDotenv: true
variablesResolutionMode: 20210326
disabledDeprecations:
  - CLI_OPTIONS_SCHEMA # some Serverless plugins haven't been updated yet and generate warnings

provider:
  name: aws
  region: ${opt:region, 'eu-west-1'}
  stage: ${opt:stage, 'dev'}
  memorySize: 1024
  timeout: 6
  logRetentionInDays: 7
  lambdaHashingVersion: 20201221 # for upcoming Serverless v3

  apiGateway:
    shouldStartNameWithService: true # for upcoming Serverless v3

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [researchTable, Arn]

  environment:
    TABLE_NAME:
      Ref: researchTable
    SERVERLESS_PROJECT: ${self:service}
    SERVERLESS_REGION: ${self:provider.region}
    SERVERLESS_STAGE: ${self:provider.stage}

    APP_DIST_URL: ${self:custom.distBucketUrl.${self:provider.region}, self:custom.distBucketUrl.default}
    APP_PUBLIC_URL: ${self:custom.distBucketUrl.${self:provider.region}, self:custom.distBucketUrl.default}
    APIGATEWAY_URL:
      Fn::Join:
        - ""
        - - https://
          - Ref: ApiGatewayRestApi
          - .execute-api.
          - Ref: AWS::Region
          - .amazonaws.com/
          - ${self:provider.stage}

plugins:
  - serverless-webpack
  - serverless-plugin-scripts
  - serverless-s3-deploy
  - serverless-dynamodb-local
  - serverless-iam-roles-per-function
  - serverless-offline

package:
  individually: true

functions:
  serve:
    runtime: nodejs12.x
    # Any web request regardless of path or method will be handled by a single Lambda function
    handler: handler.serve
    events:
      - http:
          path: /
          method: any
          cors: true
      - http:
          path: /{any+}
          method: any
          cors: true

  chat:
    runtime: nodejs12.x
    handler: handler.chat
    events:
      - http:
          path: chat/
          method: GET
  test:
    runtime: nodejs12.x
    handler: handler.test
    events:
      - http:
          path: test/
          method: GET
          cors: true

    article:
      runtime: nodejs12.x
      handler: handler.article
      events:
        - http:
          path: article/
          method: GET
          cors: true
        - http:
          path: article/{any+}
          method: GET
          cors: true

  summarizer_python:
    handler: handlers/summarizerpy.handler
    runtime: ${self:custom.pythonRuntime}
    timeout: 900
    package:
      include:
        - requirements.txt
    environment:
      PYTHONPATH: ${PWD}:${PWD}/myenv/lib/${self:custom.pythonRuntime}/site-packages
    events:
      - s3:
          bucket: ${self:custom.articlesBucket}
          event: s3:ObjectCreated:*
          existing: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource:
          - "Fn::GetAtt": [articlesBucket, Arn]
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource:
          - "Fn::GetAtt": [summarizerTable, Arn]

custom:
  articlesBucket: articles-${aws:region}-${self:provider.stage}-${aws:accountId}
  pythonRuntime: python3.9
  dynamodb:
    stages:
      - dev
  distBucketUrl:
    us-east-1:
      # us-east-1 uses a different URL format than the other regions
      Fn::Join:
        - ""
        - - https://s3.amazonaws.com/
          - Ref: DistBucket
    default:
      # All other regions
      Fn::Join:
        - ""
        - - https://s3-
          - Ref: AWS::Region
          - .amazonaws.com/
          - Ref: DistBucket

  scripts:
    hooks:
      # Build the client-side script before packaging backend code
      package:initialize: "npm run build:browser"
      deploy:finalize: "npx sls s3deploy --stage ${self:provider.stage}"

  webpack:
    webpackConfig: "webpack.server.config.js"

  assets:
    # Automatically copy distribution folder to S3 stopped working; do it manually (see `scripts.hooks.deploy:finalize`)
    auto: false
    targets:
      - bucket:
          Ref: DistBucket
        acl: public-read
        files:
          - source: dist/
            headers:
              CacheControl: max-age=31104000 # 1 year
            globs:
              - "**/*"

  serverless-offline:
    useChildProcesses: true
    noPrependStageInUrl: true
    httpPort: 3000
    lambdaPort: 3002

resources:
  Resources:
    # dynamo db

    researchTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: researchTable
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    summarizerTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: summarizerTable
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: status
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: status_index
            KeySchema:
              - AttributeName: status
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    # Customize the API Gateway resource
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        # Enable gzip compression
        MinimumCompressionSize: 1000

    # S3 Bucket for the distribution bundles
    DistBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Delete
      Properties:
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - "GET"
              AllowedOrigins:
                - Fn::Join:
                    - ""
                    - - https://
                      - Ref: ApiGatewayRestApi
                      - .execute-api.
                      - Ref: AWS::Region
                      - .amazonaws.com
              MaxAge: 3000

    # S3 Bucket for the articles
    articlesBucket:
      Type: AWS::S3::Bucket
      # DeletionPolicy: Retain
      Properties:
        BucketName: ${self:custom.articlesBucket}

  Outputs:
    ApiGatewayRestApi:
      Description: API Gateway Endpoint
      Value:
        Ref: ApiGatewayRestApi
    DistBucket:
      Description: Distribution S3 Bucket
      Value:
        Ref: DistBucket
